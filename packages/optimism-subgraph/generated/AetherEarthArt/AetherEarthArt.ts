// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AetherEarthArt extends ethereum.SmartContract {
  static bind(address: Address): AetherEarthArt {
    return new AetherEarthArt("AetherEarthArt", address);
  }

  CONTRACT_VERSION(): i32 {
    let result = super.call(
      "CONTRACT_VERSION",
      "CONTRACT_VERSION():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_CONTRACT_VERSION(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "CONTRACT_VERSION",
      "CONTRACT_VERSION():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MAX_WALLET_MINTS(): BigInt {
    let result = super.call(
      "MAX_WALLET_MINTS",
      "MAX_WALLET_MINTS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_WALLET_MINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_WALLET_MINTS",
      "MAX_WALLET_MINTS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE(): BigInt {
    let result = super.call("PRICE", "PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRICE", "PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PROVIDER_FEE(): BigInt {
    let result = super.call("PROVIDER_FEE", "PROVIDER_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PROVIDER_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PROVIDER_FEE", "PROVIDER_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _baseTokenExtension(): string {
    let result = super.call(
      "_baseTokenExtension",
      "_baseTokenExtension():(string)",
      []
    );

    return result[0].toString();
  }

  try__baseTokenExtension(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "_baseTokenExtension",
      "_baseTokenExtension():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _baseTokenURI(): string {
    let result = super.call("_baseTokenURI", "_baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try__baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("_baseTokenURI", "_baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _contractURI(): string {
    let result = super.call("_contractURI", "_contractURI():(string)", []);

    return result[0].toString();
  }

  try__contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("_contractURI", "_contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseTokenURI(): string {
    let result = super.call("baseTokenURI", "baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try_baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseTokenURI", "baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  canMintAmount(_address: Address, _amount: BigInt): boolean {
    let result = super.call(
      "canMintAmount",
      "canMintAmount(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_canMintAmount(
    _address: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canMintAmount",
      "canMintAmount(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  chargeAmountForERC20(_erc20TokenContract: Address): BigInt {
    let result = super.call(
      "chargeAmountForERC20",
      "chargeAmountForERC20(address):(uint256)",
      [ethereum.Value.fromAddress(_erc20TokenContract)]
    );

    return result[0].toBigInt();
  }

  try_chargeAmountForERC20(
    _erc20TokenContract: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "chargeAmountForERC20",
      "chargeAmountForERC20(address):(uint256)",
      [ethereum.Value.fromAddress(_erc20TokenContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectionSize(): BigInt {
    let result = super.call("collectionSize", "collectionSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collectionSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectionSize",
      "collectionSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  currentTokenId(): BigInt {
    let result = super.call("currentTokenId", "currentTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTokenId",
      "currentTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20Payable(): Address {
    let result = super.call("erc20Payable", "erc20Payable():(address)", []);

    return result[0].toAddress();
  }

  try_erc20Payable(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20Payable", "erc20Payable():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNextTokenId(): BigInt {
    let result = super.call("getNextTokenId", "getNextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextTokenId",
      "getNextTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(_count: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_count)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(_count: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_count)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inTeam(_address: Address): boolean {
    let result = super.call("inTeam", "inTeam(address):(bool)", [
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_inTeam(_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("inTeam", "inTeam(address):(bool)", [
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAllowlisted(_to: Address, _merkleProof: Array<Bytes>): boolean {
    let result = super.call(
      "isAllowlisted",
      "isAllowlisted(address,bytes32[]):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAllowlisted(
    _to: Address,
    _merkleProof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAllowlisted",
      "isAllowlisted(address,bytes32[]):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForERC20Payments(_erc20TokenContract: Address): boolean {
    let result = super.call(
      "isApprovedForERC20Payments",
      "isApprovedForERC20Payments(address):(bool)",
      [ethereum.Value.fromAddress(_erc20TokenContract)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForERC20Payments(
    _erc20TokenContract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForERC20Payments",
      "isApprovedForERC20Payments(address):(bool)",
      [ethereum.Value.fromAddress(_erc20TokenContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxBatchSize(): BigInt {
    let result = super.call("maxBatchSize", "maxBatchSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxBatchSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxBatchSize", "maxBatchSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  mintingOpen(): boolean {
    let result = super.call("mintingOpen", "mintingOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintingOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintingOpen", "mintingOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextOwnerToExplicitlySet(): BigInt {
    let result = super.call(
      "nextOwnerToExplicitlySet",
      "nextOwnerToExplicitlySet():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextOwnerToExplicitlySet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextOwnerToExplicitlySet",
      "nextOwnerToExplicitlySet():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onlyAllowlistMode(): boolean {
    let result = super.call(
      "onlyAllowlistMode",
      "onlyAllowlistMode():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_onlyAllowlistMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onlyAllowlistMode",
      "onlyAllowlistMode():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onlyERC20MintingMode(): boolean {
    let result = super.call(
      "onlyERC20MintingMode",
      "onlyERC20MintingMode():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_onlyERC20MintingMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onlyERC20MintingMode",
      "onlyERC20MintingMode():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payableAddressCount(): BigInt {
    let result = super.call(
      "payableAddressCount",
      "payableAddressCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_payableAddressCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payableAddressCount",
      "payableAddressCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payableAddresses(param0: BigInt): Address {
    let result = super.call(
      "payableAddresses",
      "payableAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_payableAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "payableAddresses",
      "payableAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payableFees(param0: BigInt): BigInt {
    let result = super.call("payableFees", "payableFees(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_payableFees(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payableFees",
      "payableFees(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  restrictedApprovalAddresses(param0: Address): boolean {
    let result = super.call(
      "restrictedApprovalAddresses",
      "restrictedApprovalAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_restrictedApprovalAddresses(
    param0: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "restrictedApprovalAddresses",
      "restrictedApprovalAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  strictPricing(): boolean {
    let result = super.call("strictPricing", "strictPricing():(bool)", []);

    return result[0].toBoolean();
  }

  try_strictPricing(): ethereum.CallResult<boolean> {
    let result = super.tryCall("strictPricing", "strictPricing():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddOrUpdateERC20ContractAsPaymentCall extends ethereum.Call {
  get inputs(): AddOrUpdateERC20ContractAsPaymentCall__Inputs {
    return new AddOrUpdateERC20ContractAsPaymentCall__Inputs(this);
  }

  get outputs(): AddOrUpdateERC20ContractAsPaymentCall__Outputs {
    return new AddOrUpdateERC20ContractAsPaymentCall__Outputs(this);
  }
}

export class AddOrUpdateERC20ContractAsPaymentCall__Inputs {
  _call: AddOrUpdateERC20ContractAsPaymentCall;

  constructor(call: AddOrUpdateERC20ContractAsPaymentCall) {
    this._call = call;
  }

  get _erc20TokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _chargeAmountInTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddOrUpdateERC20ContractAsPaymentCall__Outputs {
  _call: AddOrUpdateERC20ContractAsPaymentCall;

  constructor(call: AddOrUpdateERC20ContractAsPaymentCall) {
    this._call = call;
  }
}

export class AddToTeamCall extends ethereum.Call {
  get inputs(): AddToTeamCall__Inputs {
    return new AddToTeamCall__Inputs(this);
  }

  get outputs(): AddToTeamCall__Outputs {
    return new AddToTeamCall__Outputs(this);
  }
}

export class AddToTeamCall__Inputs {
  _call: AddToTeamCall;

  constructor(call: AddToTeamCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToTeamCall__Outputs {
  _call: AddToTeamCall;

  constructor(call: AddToTeamCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CloseAllowlistMintCall extends ethereum.Call {
  get inputs(): CloseAllowlistMintCall__Inputs {
    return new CloseAllowlistMintCall__Inputs(this);
  }

  get outputs(): CloseAllowlistMintCall__Outputs {
    return new CloseAllowlistMintCall__Outputs(this);
  }
}

export class CloseAllowlistMintCall__Inputs {
  _call: CloseAllowlistMintCall;

  constructor(call: CloseAllowlistMintCall) {
    this._call = call;
  }
}

export class CloseAllowlistMintCall__Outputs {
  _call: CloseAllowlistMintCall;

  constructor(call: CloseAllowlistMintCall) {
    this._call = call;
  }
}

export class DisableAllowlistOnlyModeCall extends ethereum.Call {
  get inputs(): DisableAllowlistOnlyModeCall__Inputs {
    return new DisableAllowlistOnlyModeCall__Inputs(this);
  }

  get outputs(): DisableAllowlistOnlyModeCall__Outputs {
    return new DisableAllowlistOnlyModeCall__Outputs(this);
  }
}

export class DisableAllowlistOnlyModeCall__Inputs {
  _call: DisableAllowlistOnlyModeCall;

  constructor(call: DisableAllowlistOnlyModeCall) {
    this._call = call;
  }
}

export class DisableAllowlistOnlyModeCall__Outputs {
  _call: DisableAllowlistOnlyModeCall;

  constructor(call: DisableAllowlistOnlyModeCall) {
    this._call = call;
  }
}

export class DisableERC20ContractAsPaymentCall extends ethereum.Call {
  get inputs(): DisableERC20ContractAsPaymentCall__Inputs {
    return new DisableERC20ContractAsPaymentCall__Inputs(this);
  }

  get outputs(): DisableERC20ContractAsPaymentCall__Outputs {
    return new DisableERC20ContractAsPaymentCall__Outputs(this);
  }
}

export class DisableERC20ContractAsPaymentCall__Inputs {
  _call: DisableERC20ContractAsPaymentCall;

  constructor(call: DisableERC20ContractAsPaymentCall) {
    this._call = call;
  }

  get _erc20TokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableERC20ContractAsPaymentCall__Outputs {
  _call: DisableERC20ContractAsPaymentCall;

  constructor(call: DisableERC20ContractAsPaymentCall) {
    this._call = call;
  }
}

export class DisableERC20OnlyMintingCall extends ethereum.Call {
  get inputs(): DisableERC20OnlyMintingCall__Inputs {
    return new DisableERC20OnlyMintingCall__Inputs(this);
  }

  get outputs(): DisableERC20OnlyMintingCall__Outputs {
    return new DisableERC20OnlyMintingCall__Outputs(this);
  }
}

export class DisableERC20OnlyMintingCall__Inputs {
  _call: DisableERC20OnlyMintingCall;

  constructor(call: DisableERC20OnlyMintingCall) {
    this._call = call;
  }
}

export class DisableERC20OnlyMintingCall__Outputs {
  _call: DisableERC20OnlyMintingCall;

  constructor(call: DisableERC20OnlyMintingCall) {
    this._call = call;
  }
}

export class EnableAllowlistOnlyModeCall extends ethereum.Call {
  get inputs(): EnableAllowlistOnlyModeCall__Inputs {
    return new EnableAllowlistOnlyModeCall__Inputs(this);
  }

  get outputs(): EnableAllowlistOnlyModeCall__Outputs {
    return new EnableAllowlistOnlyModeCall__Outputs(this);
  }
}

export class EnableAllowlistOnlyModeCall__Inputs {
  _call: EnableAllowlistOnlyModeCall;

  constructor(call: EnableAllowlistOnlyModeCall) {
    this._call = call;
  }
}

export class EnableAllowlistOnlyModeCall__Outputs {
  _call: EnableAllowlistOnlyModeCall;

  constructor(call: EnableAllowlistOnlyModeCall) {
    this._call = call;
  }
}

export class EnableERC20ContractAsPaymentCall extends ethereum.Call {
  get inputs(): EnableERC20ContractAsPaymentCall__Inputs {
    return new EnableERC20ContractAsPaymentCall__Inputs(this);
  }

  get outputs(): EnableERC20ContractAsPaymentCall__Outputs {
    return new EnableERC20ContractAsPaymentCall__Outputs(this);
  }
}

export class EnableERC20ContractAsPaymentCall__Inputs {
  _call: EnableERC20ContractAsPaymentCall;

  constructor(call: EnableERC20ContractAsPaymentCall) {
    this._call = call;
  }

  get _erc20TokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableERC20ContractAsPaymentCall__Outputs {
  _call: EnableERC20ContractAsPaymentCall;

  constructor(call: EnableERC20ContractAsPaymentCall) {
    this._call = call;
  }
}

export class EnableERC20OnlyMintingCall extends ethereum.Call {
  get inputs(): EnableERC20OnlyMintingCall__Inputs {
    return new EnableERC20OnlyMintingCall__Inputs(this);
  }

  get outputs(): EnableERC20OnlyMintingCall__Outputs {
    return new EnableERC20OnlyMintingCall__Outputs(this);
  }
}

export class EnableERC20OnlyMintingCall__Inputs {
  _call: EnableERC20OnlyMintingCall;

  constructor(call: EnableERC20OnlyMintingCall) {
    this._call = call;
  }
}

export class EnableERC20OnlyMintingCall__Outputs {
  _call: EnableERC20OnlyMintingCall;

  constructor(call: EnableERC20OnlyMintingCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _payables(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _payouts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get tokenName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get uris(): Array<string> {
    return this._call.inputValues[5].value.toStringArray();
  }

  get _collectionSettings(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get _settings(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintToAdminV2Call extends ethereum.Call {
  get inputs(): MintToAdminV2Call__Inputs {
    return new MintToAdminV2Call__Inputs(this);
  }

  get outputs(): MintToAdminV2Call__Outputs {
    return new MintToAdminV2Call__Outputs(this);
  }
}

export class MintToAdminV2Call__Inputs {
  _call: MintToAdminV2Call;

  constructor(call: MintToAdminV2Call) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _qty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintToAdminV2Call__Outputs {
  _call: MintToAdminV2Call;

  constructor(call: MintToAdminV2Call) {
    this._call = call;
  }
}

export class MintToMultipleCall extends ethereum.Call {
  get inputs(): MintToMultipleCall__Inputs {
    return new MintToMultipleCall__Inputs(this);
  }

  get outputs(): MintToMultipleCall__Outputs {
    return new MintToMultipleCall__Outputs(this);
  }
}

export class MintToMultipleCall__Inputs {
  _call: MintToMultipleCall;

  constructor(call: MintToMultipleCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintToMultipleCall__Outputs {
  _call: MintToMultipleCall;

  constructor(call: MintToMultipleCall) {
    this._call = call;
  }
}

export class MintToMultipleALCall extends ethereum.Call {
  get inputs(): MintToMultipleALCall__Inputs {
    return new MintToMultipleALCall__Inputs(this);
  }

  get outputs(): MintToMultipleALCall__Outputs {
    return new MintToMultipleALCall__Outputs(this);
  }
}

export class MintToMultipleALCall__Inputs {
  _call: MintToMultipleALCall;

  constructor(call: MintToMultipleALCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class MintToMultipleALCall__Outputs {
  _call: MintToMultipleALCall;

  constructor(call: MintToMultipleALCall) {
    this._call = call;
  }
}

export class MintToMultipleERC20Call extends ethereum.Call {
  get inputs(): MintToMultipleERC20Call__Inputs {
    return new MintToMultipleERC20Call__Inputs(this);
  }

  get outputs(): MintToMultipleERC20Call__Outputs {
    return new MintToMultipleERC20Call__Outputs(this);
  }
}

export class MintToMultipleERC20Call__Inputs {
  _call: MintToMultipleERC20Call;

  constructor(call: MintToMultipleERC20Call) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _erc20TokenContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintToMultipleERC20Call__Outputs {
  _call: MintToMultipleERC20Call;

  constructor(call: MintToMultipleERC20Call) {
    this._call = call;
  }
}

export class MintToMultipleERC20ALCall extends ethereum.Call {
  get inputs(): MintToMultipleERC20ALCall__Inputs {
    return new MintToMultipleERC20ALCall__Inputs(this);
  }

  get outputs(): MintToMultipleERC20ALCall__Outputs {
    return new MintToMultipleERC20ALCall__Outputs(this);
  }
}

export class MintToMultipleERC20ALCall__Inputs {
  _call: MintToMultipleERC20ALCall;

  constructor(call: MintToMultipleERC20ALCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _erc20TokenContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class MintToMultipleERC20ALCall__Outputs {
  _call: MintToMultipleERC20ALCall;

  constructor(call: MintToMultipleERC20ALCall) {
    this._call = call;
  }
}

export class OpenAllowlistMintCall extends ethereum.Call {
  get inputs(): OpenAllowlistMintCall__Inputs {
    return new OpenAllowlistMintCall__Inputs(this);
  }

  get outputs(): OpenAllowlistMintCall__Outputs {
    return new OpenAllowlistMintCall__Outputs(this);
  }
}

export class OpenAllowlistMintCall__Inputs {
  _call: OpenAllowlistMintCall;

  constructor(call: OpenAllowlistMintCall) {
    this._call = call;
  }
}

export class OpenAllowlistMintCall__Outputs {
  _call: OpenAllowlistMintCall;

  constructor(call: OpenAllowlistMintCall) {
    this._call = call;
  }
}

export class OpenMintingCall extends ethereum.Call {
  get inputs(): OpenMintingCall__Inputs {
    return new OpenMintingCall__Inputs(this);
  }

  get outputs(): OpenMintingCall__Outputs {
    return new OpenMintingCall__Outputs(this);
  }
}

export class OpenMintingCall__Inputs {
  _call: OpenMintingCall;

  constructor(call: OpenMintingCall) {
    this._call = call;
  }
}

export class OpenMintingCall__Outputs {
  _call: OpenMintingCall;

  constructor(call: OpenMintingCall) {
    this._call = call;
  }
}

export class RemoveFromTeamCall extends ethereum.Call {
  get inputs(): RemoveFromTeamCall__Inputs {
    return new RemoveFromTeamCall__Inputs(this);
  }

  get outputs(): RemoveFromTeamCall__Outputs {
    return new RemoveFromTeamCall__Outputs(this);
  }
}

export class RemoveFromTeamCall__Inputs {
  _call: RemoveFromTeamCall;

  constructor(call: RemoveFromTeamCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromTeamCall__Outputs {
  _call: RemoveFromTeamCall;

  constructor(call: RemoveFromTeamCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResetPayablesCall extends ethereum.Call {
  get inputs(): ResetPayablesCall__Inputs {
    return new ResetPayablesCall__Inputs(this);
  }

  get outputs(): ResetPayablesCall__Outputs {
    return new ResetPayablesCall__Outputs(this);
  }
}

export class ResetPayablesCall__Inputs {
  _call: ResetPayablesCall;

  constructor(call: ResetPayablesCall) {
    this._call = call;
  }

  get _newPayables(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _newPayouts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ResetPayablesCall__Outputs {
  _call: ResetPayablesCall;

  constructor(call: ResetPayablesCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetApprovalRestrictionCall extends ethereum.Call {
  get inputs(): SetApprovalRestrictionCall__Inputs {
    return new SetApprovalRestrictionCall__Inputs(this);
  }

  get outputs(): SetApprovalRestrictionCall__Outputs {
    return new SetApprovalRestrictionCall__Outputs(this);
  }
}

export class SetApprovalRestrictionCall__Inputs {
  _call: SetApprovalRestrictionCall;

  constructor(call: SetApprovalRestrictionCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isRestricted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalRestrictionCall__Outputs {
  _call: SetApprovalRestrictionCall;

  constructor(call: SetApprovalRestrictionCall) {
    this._call = call;
  }
}

export class SetBaseTokenExtensionCall extends ethereum.Call {
  get inputs(): SetBaseTokenExtensionCall__Inputs {
    return new SetBaseTokenExtensionCall__Inputs(this);
  }

  get outputs(): SetBaseTokenExtensionCall__Outputs {
    return new SetBaseTokenExtensionCall__Outputs(this);
  }
}

export class SetBaseTokenExtensionCall__Inputs {
  _call: SetBaseTokenExtensionCall;

  constructor(call: SetBaseTokenExtensionCall) {
    this._call = call;
  }

  get baseExtension(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseTokenExtensionCall__Outputs {
  _call: SetBaseTokenExtensionCall;

  constructor(call: SetBaseTokenExtensionCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetERC20PayableAddressCall extends ethereum.Call {
  get inputs(): SetERC20PayableAddressCall__Inputs {
    return new SetERC20PayableAddressCall__Inputs(this);
  }

  get outputs(): SetERC20PayableAddressCall__Outputs {
    return new SetERC20PayableAddressCall__Outputs(this);
  }
}

export class SetERC20PayableAddressCall__Inputs {
  _call: SetERC20PayableAddressCall;

  constructor(call: SetERC20PayableAddressCall) {
    this._call = call;
  }

  get _newErc20Payable(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetERC20PayableAddressCall__Outputs {
  _call: SetERC20PayableAddressCall;

  constructor(call: SetERC20PayableAddressCall) {
    this._call = call;
  }
}

export class SetMaxMintCall extends ethereum.Call {
  get inputs(): SetMaxMintCall__Inputs {
    return new SetMaxMintCall__Inputs(this);
  }

  get outputs(): SetMaxMintCall__Outputs {
    return new SetMaxMintCall__Outputs(this);
  }
}

export class SetMaxMintCall__Inputs {
  _call: SetMaxMintCall;

  constructor(call: SetMaxMintCall) {
    this._call = call;
  }

  get _newMaxMint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxMintCall__Outputs {
  _call: SetMaxMintCall;

  constructor(call: SetMaxMintCall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get _feeInWei(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}

export class SetProviderFeeCall extends ethereum.Call {
  get inputs(): SetProviderFeeCall__Inputs {
    return new SetProviderFeeCall__Inputs(this);
  }

  get outputs(): SetProviderFeeCall__Outputs {
    return new SetProviderFeeCall__Outputs(this);
  }
}

export class SetProviderFeeCall__Inputs {
  _call: SetProviderFeeCall;

  constructor(call: SetProviderFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProviderFeeCall__Outputs {
  _call: SetProviderFeeCall;

  constructor(call: SetProviderFeeCall) {
    this._call = call;
  }
}

export class SetStrictPricingCall extends ethereum.Call {
  get inputs(): SetStrictPricingCall__Inputs {
    return new SetStrictPricingCall__Inputs(this);
  }

  get outputs(): SetStrictPricingCall__Outputs {
    return new SetStrictPricingCall__Outputs(this);
  }
}

export class SetStrictPricingCall__Inputs {
  _call: SetStrictPricingCall;

  constructor(call: SetStrictPricingCall) {
    this._call = call;
  }

  get _newStatus(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStrictPricingCall__Outputs {
  _call: SetStrictPricingCall;

  constructor(call: SetStrictPricingCall) {
    this._call = call;
  }
}

export class SetWalletMaxCall extends ethereum.Call {
  get inputs(): SetWalletMaxCall__Inputs {
    return new SetWalletMaxCall__Inputs(this);
  }

  get outputs(): SetWalletMaxCall__Outputs {
    return new SetWalletMaxCall__Outputs(this);
  }
}

export class SetWalletMaxCall__Inputs {
  _call: SetWalletMaxCall;

  constructor(call: SetWalletMaxCall) {
    this._call = call;
  }

  get _newWalletMax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWalletMaxCall__Outputs {
  _call: SetWalletMaxCall;

  constructor(call: SetWalletMaxCall) {
    this._call = call;
  }
}

export class StopMintingCall extends ethereum.Call {
  get inputs(): StopMintingCall__Inputs {
    return new StopMintingCall__Inputs(this);
  }

  get outputs(): StopMintingCall__Outputs {
    return new StopMintingCall__Outputs(this);
  }
}

export class StopMintingCall__Inputs {
  _call: StopMintingCall;

  constructor(call: StopMintingCall) {
    this._call = call;
  }
}

export class StopMintingCall__Outputs {
  _call: StopMintingCall;

  constructor(call: StopMintingCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMerkleRootCall extends ethereum.Call {
  get inputs(): UpdateMerkleRootCall__Inputs {
    return new UpdateMerkleRootCall__Inputs(this);
  }

  get outputs(): UpdateMerkleRootCall__Outputs {
    return new UpdateMerkleRootCall__Outputs(this);
  }
}

export class UpdateMerkleRootCall__Inputs {
  _call: UpdateMerkleRootCall;

  constructor(call: UpdateMerkleRootCall) {
    this._call = call;
  }

  get _newMerkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UpdateMerkleRootCall__Outputs {
  _call: UpdateMerkleRootCall;

  constructor(call: UpdateMerkleRootCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawERC20Call extends ethereum.Call {
  get inputs(): WithdrawERC20Call__Inputs {
    return new WithdrawERC20Call__Inputs(this);
  }

  get outputs(): WithdrawERC20Call__Outputs {
    return new WithdrawERC20Call__Outputs(this);
  }
}

export class WithdrawERC20Call__Inputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }

  get _tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountToWithdraw(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawERC20Call__Outputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }
}
